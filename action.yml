name: 'Deploy to AWS Lambda'
description: 'Deploys a zip file, artifact, or container image to AWS Lambda, with optional config, env, rollback, and layers support.'
author: 'Rick Meneely <rick@devopspolis.com>'
branding:
  icon: cloud-lightning
  color: purple
  label: Deploy to Lambda

inputs:
  function_name:
    description: Lambda function name
    required: true
  version:
    description: Deploy version (publishes a new version)
    required: false
  aliases:
    description: Comma-separated Lambda aliases to update after deployment
    required: false
  environment_secret:
    description: AWS Secret containing lambda environment variables as JSON
    required: false
  configuration_secret:
    description: AWS Secret containing lambda configuration as JSON
    required: false
  layers:
    description: Comma-separated list of Lambda layer ARNs or names
    required: false
  uri:
    description: AWS S3 URI (s3://bucket/key.zip) or ECR image URI (repository:tag) to deploy
    required: false
  artifact:
    description: GitHub Actions artifact in the format "artifact_name:filename"
    required: false
  role:
    description: IAM role to assume (optional)
    required: false

outputs:
  function_name:
    description: The Lambda function name
    value: ${{ inputs.function_name }}
  function_version:
    description: The published function version or empty if $LATEST
    value: ${{ steps.publish-version.outputs.function_version || steps.default-version.outputs.function_version }}

runs:
  using: composite
  steps:
    - name: Resolve role ARN if short name
      if: ${{ inputs.role }}
      id: resolve-role
      shell: bash
      run: |
        role="${{ inputs.role }}"
        if [[ "$role" != arn:aws:iam::* ]]; then
          echo "Resolving short role name to full ARN..."
          # For OIDC, we need the AWS_ACCOUNT_ID to be available
          if [[ -z "$AWS_ACCOUNT_ID" ]]; then
            echo "❌ AWS_ACCOUNT_ID environment variable is required when using short role names"
            exit 1
          fi
          role="arn:aws:iam::${AWS_ACCOUNT_ID}:role/$role"
        fi
        echo "role_arn=$role" >> $GITHUB_OUTPUT
        echo "✅ Using role: $role"

    - name: Configure AWS credentials (if role specified)
      if: ${{ inputs.role }}
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ steps.resolve-role.outputs.role_arn }}
        role-session-name: GitHubActionDeploySession
        aws-region: ${{ inputs.bucket_region }}

    - name: Validate inputs
      shell: bash
      run: |
        if [[ -z "${{ inputs.uri }}" && -z "${{ inputs.artifact }}" ]]; then
          echo "❌ Error: Either 'uri' or 'artifact' input is required"
          exit 1
        fi
        if [[ -n "${{ inputs.uri }}" && -n "${{ inputs.artifact }}" ]]; then
          echo "⚠️ Warning: Both 'uri' and 'artifact' provided. Using 'uri' and ignoring 'artifact'"
        fi

    - name: Parse and validate artifact input
      if: ${{ inputs.artifact && !inputs.uri }}
      shell: bash
      run: |
        artifact="${{ inputs.artifact }}"
        if [[ "$artifact" != *":"* ]]; then
          echo "❌ Error: Artifact format must be 'artifact-name:filename.zip'"
          exit 1
        fi
        artifact_name=$(echo "$artifact" | cut -d':' -f1)
        filename=$(echo "$artifact" | cut -d':' -f2)
        echo "artifact_name=$artifact_name" >> $GITHUB_ENV
        echo "filename=$filename" >> $GITHUB_ENV

    - name: Load Lambda configuration from secret
      if: inputs.configuration_secret
      id: load-config
      shell: bash
      run: |
        CONFIG_JSON=$(aws secretsmanager get-secret-value \
          --secret-id "${{ inputs.configuration_secret }}" \
          --query SecretString --output text)

        ROLE_NAME=$(echo "$CONFIG_JSON" | jq -r '.Role // empty')
        if [[ -n "$ROLE_NAME" && "$ROLE_NAME" != arn:aws:iam::* ]]; then
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          ROLE_ARN="arn:aws:iam::$ACCOUNT_ID:role/$ROLE_NAME"
          CONFIG_JSON=$(echo "$CONFIG_JSON" | jq --arg role "$ROLE_ARN" '.Role = $role')
        fi

        echo "$CONFIG_JSON" > lambda_config.json

    - name: Apply Lambda configuration
      if: inputs.configuration_secret
      shell: bash
      run: |
        aws lambda update-function-configuration \
          --function-name "${{ inputs.function_name }}" \
          --cli-input-json file://lambda_config.json
        aws lambda wait function-updated --function-name "${{ inputs.function_name }}"

    - name: Resolve layer ARNs
      if: ${{ inputs.layers }}
      shell: bash
      run: |
        IFS=',' read -ra LAYER_ARRAY <<< "${{ inputs.layers }}"
        RESOLVED_LAYERS=""
        for layer in "${LAYER_ARRAY[@]}"; do
          layer=$(echo "$layer" | xargs) # trim whitespace
          if [[ "$layer" != arn:aws:lambda:* ]]; then
            # Resolve short name to full ARN
            layer="arn:aws:lambda:${AWS_REGION}:${AWS_ACCOUNT_ID}:layer:$layer"
          fi
          RESOLVED_LAYERS="${RESOLVED_LAYERS}${layer},"
        done
        echo "resolved_layers=${RESOLVED_LAYERS%,}" >> $GITHUB_ENV

        aws lambda update-function-configuration \
          --function-name "${{ inputs.function_name }}" \
          --layers "${RESOLVED_LAYERS[@]}"
        aws lambda wait function-updated --function-name "${{ inputs.function_name }}"

    - name: Validate secrets exist
      if: ${{ inputs.configuration_secret || inputs.environment_secret }}
      shell: bash
      run: |
        if [[ -n "${{ inputs.configuration_secret }}" ]]; then
          if ! aws secretsmanager describe-secret --secret-id "${{ inputs.configuration_secret }}" >/dev/null 2>&1; then
            echo "❌ Error: Configuration secret '${{ inputs.configuration_secret }}' not found"
            exit 1
          fi
        fi
        if [[ -n "${{ inputs.environment_secret }}" ]]; then
          if ! aws secretsmanager describe-secret --secret-id "${{ inputs.environment_secret }}" >/dev/null 2>&1; then
            echo "❌ Error: Environment secret '${{ inputs.environment_secret }}' not found"
            exit 1
          fi
        fi

    - name: Load environment variables from secret
      if: inputs.environment_secret
      id: load-env
      shell: bash
      run: |
        ENV_VARS_JSON=$(aws secretsmanager get-secret-value \
          --secret-id "${{ inputs.environment_secret }}" \
          --query SecretString --output text)

        if echo "$ENV_VARS_JSON" | jq -e 'has("VERSION")' >/dev/null && [[ -n "${{ inputs.version }}" ]]; then
          ENV_VARS_JSON=$(echo "$ENV_VARS_JSON" | jq --arg v "${{ inputs.version }}" '.VERSION = $v')
        fi

        echo "{\"Variables\": $ENV_VARS_JSON}" > lambda_env.json

    - name: Apply environment variables
      if: inputs.environment_secret
      shell: bash
      run: |
        aws lambda update-function-configuration \
          --function-name "${{ inputs.function_name }}" \
          --environment file://lambda_env.json
        aws lambda wait function-updated --function-name "${{ inputs.function_name }}"

    - name: Deploy from URI
      if: inputs.uri
      shell: bash
      run: |
        if [[ "${{ inputs.uri }}" == s3://* ]]; then
          BUCKET=$(echo "${{ inputs.uri }}" | cut -d/ -f3)
          KEY=$(echo "${{ inputs.uri }}" | cut -d/ -f4-)
          aws lambda update-function-code \
            --function-name "${{ inputs.function_name }}" \
            --s3-bucket "$BUCKET" \
            --s3-key "$KEY"
        else
          aws lambda update-function-code \
            --function-name "${{ inputs.function_name }}" \
            --image-uri "${{ inputs.uri }}"
        fi
        aws lambda wait function-updated --function-name "${{ inputs.function_name }}"

    - name: Download artifact
      if: inputs.artifact && !inputs.uri
      uses: actions/download-artifact@v4
      with:
        name: ${{ steps.parse-artifact.outputs.artifact_name }}
        path: ./artifact-download

    - name: Deploy from artifact
      if: inputs.artifact && !inputs.uri
      shell: bash
      run: |
        FILE_PATH="./artifact-download/${{ steps.parse-artifact.outputs.artifact_file }}"
        if [[ ! -f "$FILE_PATH" ]]; then
          echo "::error title=Artifact missing::Artifact file not found: $FILE_PATH"
          exit 1
        fi
        aws lambda update-function-code \
          --function-name "${{ inputs.function_name }}" \
          --zip-file fileb://"$FILE_PATH"
        aws lambda wait function-updated --function-name "${{ inputs.function_name }}"

    - name: Default version fallback
      id: default-version
      if: ${{ !inputs.version }}
      shell: bash
      run: |
        echo "function_version=\$LATEST" >> $GITHUB_ENV
        echo "function_version=\$LATEST" >> $GITHUB_OUTPUT

    - name: Publish new version
      if: inputs.version
      id: publish-version
      shell: bash
      run: |
        response=$(aws lambda publish-version --function-name "${{ inputs.function_name }}")
        function_version=$(echo "$response" | jq -r '.Version')
        echo "Published function version: $function_version"
        echo "function_version=$function_version" >> $GITHUB_ENV
        echo "function_version=$function_version" >> $GITHUB_OUTPUT

    - name: Update aliases
      if: inputs.aliases
      shell: bash
      run: |
        version="${{ steps.publish-version.outputs.function_version }}"
        if [ -z "$version" ]; then
          version="${{ steps.default-version.outputs.function_version }}"
        fi

        for alias in $(echo "${{ inputs.aliases }}" | tr ',' ' '); do
          [[ -z "$alias" ]] && continue
          exists=$(aws lambda list-aliases --function-name "${{ inputs.function_name }}" --query "Aliases[?Name=='${alias}'].Name" --output text)
          if [[ -z "$exists" ]]; then
            aws lambda create-alias \
              --function-name "${{ inputs.function_name }}" \
              --name "$alias" \
              --function-version "$version"
          else
            aws lambda update-alias \
              --function-name "${{ inputs.function_name }}" \
              --name "$alias" \
              --function-version "$version"
          fi
        done
